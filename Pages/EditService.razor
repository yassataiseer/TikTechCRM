@page "/editservice/{Service_name}/{Service_purpose}/{Service_cost}"

<!DOCTYPE html>
<html>

<head>
    <h1>Edit Service:</h1>
    <h6><b>DO NOT USE THE FOLLOWING CHARACTERS: / \ </b></h6>
</head>
<div class="card">
<div class="container">
<EditForm Model="@EditServiceModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <h4>Service Name:</h4>
    <h6>***Cant be changed!!</h6>
    <InputText type="text" id="Service_name" @bind-Value="@Service_name" readonly/>
    <br>
    <h4>Service Purpose:</h4>
    <InputText type="text" id="Service_purpose" placeholder="@Service_purpose" @bind-Value="EditServiceModel.Service_purpose" />
    <h4>Price:</h4>
    <InputNumber type=float min="1" id="Service_cost" placeholder="@Service_cost" @bind-Value="EditServiceModel.Service_cost" />
    <br>
    <br>
    <button type="submit" class="btn btn-primary">Submit</button> 
    <ValidationSummary />
</EditForm>
</div>
</div>
</html>


@code{
    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;

    public EditServiceModel EditServiceModel = new();
    [Parameter]
    public string Service_name { get; set; }
    [Parameter]
    public string Service_purpose{ get; set; }
    [Parameter]
    public string Service_cost{ get; set; }
    private dynamic validate;

    public async void HandleValidSubmit(){
        using var client = new HttpClient();
        var result = await client.GetStringAsync("https://ticktechapi.pythonanywhere.com/Services/update_Services/"+Service_name+"/"+EditServiceModel.Service_purpose+"/"+EditServiceModel.Service_cost.ToString("0.0"));
        dynamic data = JObject.Parse(result);
        Console.WriteLine(data.Status);
        if (data.Status=="true"){         
            NavManager.NavigateTo("/services",true); 
        } 
        else {
            await JsRuntime.InvokeVoidAsync("alert", "Error!");
        }
    }
    protected override async Task OnInitializedAsync(){
        validate =  await JsRuntime.InvokeAsync<string>("BlazorGetLocalStorage","Username:");
       string value = (string)validate;
       EditServiceModel.Service_cost = Convert.ToDouble(Service_cost);
       EditServiceModel.Service_purpose = Service_purpose;

       if(value==null){
            NavManager.NavigateTo("/",true); 
       }        
    }
}