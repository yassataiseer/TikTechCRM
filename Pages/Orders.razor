@page "/orders"
@inject HttpClient Http

<!DOCTYPE html>
<html>

<h1>Orders:</h1>
<button  class="btn btn-info"  @onclick="() => NewOrder()" ><Tooltip Text="New Order"><i class="oi oi-plus"></i> </Tooltip> Order</button> 




<body>
    <table class="table">
        <thead>
            <tr>
                <th>Client Name:</th>
                <th>Employee</th>
                <th>Product</th>
                <th>Brand</th>
                <th>Accessory</th>
                <th>Price</th>
                <th>Status</th>
                <th>Service</th>
                <th>Comments</th>
                <th>Add Date</th>
                <th>Up Date</th>
            </tr>
        </thead>
        <tbody>
            
            @foreach (var CurrentOrder in OrderData)
            {
                String Color="#ff9e9e";
                if(!@CurrentOrder.Deleted){
                    if(@CurrentOrder.Status=="Complete"||@CurrentOrder.Status=="Completed"){
                        Color="#adffc3";
                    }
                    if(@CurrentOrder.Status=="In-Progress"){
                        Color="#f1ff59";
                    }
                    <tr>
                    <td bgcolor=@Color>@CurrentOrder.Client</td>
                    <td bgcolor=@Color>@CurrentOrder.Employee</td>
                    <td bgcolor=@Color>@CurrentOrder.Product</td>
                    <td bgcolor=@Color>@CurrentOrder.Brand</td>
                    <td bgcolor=@Color>@CurrentOrder.Accessory</td>
                    <td bgcolor=@Color>@CurrentOrder.Price</td>
                    <td bgcolor=@Color>@CurrentOrder.Status</td>
                    <td bgcolor=@Color>@CurrentOrder.Service</td>
                    <td bgcolor=@Color>@CurrentOrder.Comments</td>
                    <td bgcolor=@Color>@CurrentOrder.Add_date</td>
                    <td bgcolor=@Color>@CurrentOrder.Up_data</td>
                        <button class="btn btn-primary" @onclick="() => EditRedirect(CurrentOrder.Order_no,CurrentOrder.Client,CurrentOrder.Employee,CurrentOrder.Product, CurrentOrder.Brand,CurrentOrder.Accessory, CurrentOrder.Price, CurrentOrder.Status, CurrentOrder.Service, CurrentOrder.Comments)" ><Tooltip Text="Edit Row"> <i class="oi oi-pencil"></i></Tooltip></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteOrder(CurrentOrder.Order_no)" > <Tooltip Text="Delete"><i class="oi oi-trash"></i></Tooltip></button> 
                        <button type="button" class="btn btn-dark" @onclick="() => ExportToPdf(CurrentOrder)" > <Tooltip Text="Print"><i class="oi oi-print"></i></Tooltip></button> 
                       
                    </tr>
                }
            }
            
        </tbody>
    </table>

</body>

</html>


    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;
    @using Syncfusion.Pdf;
    @using Syncfusion.Pdf.Grid;
    @using Syncfusion.Drawing;
    @using Syncfusion.Pdf.Graphics;
    @inject Microsoft.JSInterop.IJSRuntime JS
    @using System.IO;
    @using BlazorPdfExport.Data;
@code{
    private List<OrderModel> OrderData = new();


    protected override async Task OnInitializedAsync(){
        dynamic validate;
        validate =  await JsRuntime.InvokeAsync<string>("BlazorGetLocalStorage","Username:");
       string value = (string)validate;
       if(value==null){
            NavManager.NavigateTo("/",true); 
       }
        using var client = new HttpClient();
        var result = await client.GetStringAsync("https://ticktechapi.pythonanywhere.com/Orders/all_Order");

        JArray data = JArray.Parse(result);
        foreach (dynamic obj in data){
                OrderData.Add(new OrderModel(){
                    Accessory = obj.Accessory,
                    Add_date  = obj.Add_date,
                    Brand = obj.Brand,
                    Client = obj.Client,
                    Comments = obj.Comments,
                    Deleted = obj.Deleted,
                    Employee = obj.Employee,
                    Order_no = obj.Order_no,
                    Price = obj.Price,
                    Product = obj.Product,
                    Service = obj.Service,
                    Status = obj.Status,
                    Up_data = obj.Up_data,
            });
        }
        StateHasChanged();
    }
    public void NewOrder(){
        NavManager.NavigateTo("/neworder",true); 
    }
    public async void DeleteOrder(int Order_no){
        using var client = new HttpClient();
        var result = await client.GetStringAsync("https://ticktechapi.pythonanywhere.com/Orders/del_Order/"+Order_no.ToString());
        NavManager.NavigateTo("/orders",true);       
    }
    private void EditRedirect(int Order_no,string Client,string Employee,string Product, string Brand, string Accessory, double Amount, string Status, string Service, string Comments){
         NavManager.NavigateTo("/editorder/"+Order_no.ToString()+"/"+Client+"/"+Employee+"/"+Product+"/"+Brand+"/"+Accessory+"/"+Amount.ToString("0.00")+"/"+Status+"/"+Service+"/"+Comments,true); 
    }
    void ExportToPdf(OrderModel OrderData)
    {
        Syncfusion.Licensing.SyncfusionLicenseProvider.RegisterLicense("NTQyMzUwQDMxMzkyZTMzMmUzMEFFR0lYRDl5OWo0Q3o0SEZsN2grQ2JvN2NTNzVwaytmYk1WeHVJcVVFZmM9");
        int cellMargin = 8;
        PdfDocument pdfDocument = new PdfDocument();
        //Add Page to the PDF document.
        PdfPage page = pdfDocument.Pages.Add();

        //Create a new font.
        PdfStandardFont font = new PdfStandardFont(PdfFontFamily.Courier, 16);
        PdfStandardFont font2 = new PdfStandardFont(PdfFontFamily.Helvetica, 18);
        PdfStandardFont font3 = new PdfStandardFont(PdfFontFamily.TimesRoman, 11);

        //Create a text element to draw a text in PDF page.
        //Title Area:
        PdfTextElement title = new PdfTextElement("Tik Tech Electronics", font, PdfBrushes.Black);
        PdfTextElement title2 = new PdfTextElement("541 Thompson Road", font, PdfBrushes.Black);
        PdfTextElement title3 = new PdfTextElement("Milton, ON L9T7Z1", font, PdfBrushes.Black);
        PdfTextElement title4 = new PdfTextElement("Sales Receipt", font2, PdfBrushes.Black);

        PdfLayoutResult result = title.Draw(page, new PointF(0, 0));
        PdfLayoutResult result2 = title2.Draw(page, new PointF(0, 17));
        PdfLayoutResult result3 = title3.Draw(page, new PointF(0, 34));
        PdfLayoutResult result4 = title4.Draw(page, new PointF(350, 0));




        PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
        PdfLayoutFormat format = new PdfLayoutFormat();
        format.Layout = PdfLayoutType.Paginate;

        //Table:
        PdfGrid pdfGrid = new PdfGrid();
        pdfGrid.Style.CellPadding.Left = cellMargin;
        pdfGrid.Style.CellPadding.Right = cellMargin;
        //Add values to list

        List<object> headerdata = new List<object>();

    
        Object row2 = new{ Date = DateTime.Now, Name = OrderData.Client, Customer_No = OrderData.Order_no };


        headerdata.Add(row2);

        //Add list to IEnumerable

        IEnumerable<object> dataTable = headerdata;

        //Assign data source.
        pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);

        pdfGrid.DataSource = dataTable;


        //Draw grid to the page of PDF document.

        pdfGrid.Draw(page, new Syncfusion.Drawing.PointF(300, 40)); 


        PdfGrid pdfUpperBodyGrid = new PdfGrid();
        pdfUpperBodyGrid.Style.CellPadding.Left = cellMargin;
        pdfUpperBodyGrid.Style.CellPadding.Right = cellMargin;


        List<object> UpperBodyData = new List<object>();
        Object UpperBodyRow1 = new{Employee=OrderData.Employee};
        UpperBodyData.Add(UpperBodyRow1);    

        IEnumerable<object> UpperBodyTable = UpperBodyData;
             
        pdfUpperBodyGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
        pdfUpperBodyGrid.DataSource = UpperBodyData;
        pdfUpperBodyGrid.Draw(page, new Syncfusion.Drawing.PointF(400, 120));  






        PdfGrid pdfBodyGrid = new PdfGrid();
        pdfBodyGrid.Style.CellPadding.Left = cellMargin;
        pdfBodyGrid.Style.CellPadding.Right = cellMargin;


        List<object> bodydata = new List<object>();
        Object BodyRow1 = new{Product=OrderData.Product,Brand=OrderData.Brand,Accessory=OrderData.Accessory,Price="$"+OrderData.Price};
        bodydata.Add(BodyRow1);      
        
        IEnumerable<object> bodyTable = bodydata;
             
        pdfBodyGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
        pdfBodyGrid.DataSource = bodydata;
        pdfBodyGrid.Draw(page, new Syncfusion.Drawing.PointF(15, 200));  



        PdfGrid pdfDownBodyGrid = new PdfGrid();
        pdfDownBodyGrid.Style.CellPadding.Left = cellMargin;
        pdfDownBodyGrid.Style.CellPadding.Right = cellMargin;


        List<object> downbodydata = new List<object>();
        Object DownBodyRow1 = new{Status=OrderData.Status,Service=OrderData.Service,Comments=OrderData.Comments};
        downbodydata.Add(DownBodyRow1);      
        
        IEnumerable<object> DownBodyTable = downbodydata;
             
        pdfDownBodyGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
        pdfDownBodyGrid.DataSource = downbodydata;
        pdfDownBodyGrid.Draw(page, new Syncfusion.Drawing.PointF(300, 300));  


        PdfGrid pdfFooterGrid = new PdfGrid();
        pdfFooterGrid.Style.CellPadding.Left = cellMargin;
        pdfFooterGrid.Style.CellPadding.Right = cellMargin;
        double FinalPrice = OrderData.Price*1.13;
        List<object> footerdata = new List<object>();
        Object footerRow1 = new{Tax_Rate="13%",Total="$"+FinalPrice.ToString("0.00")};
        footerdata.Add(footerRow1);
        IEnumerable<object> footerTable = footerdata;
        pdfFooterGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
        pdfFooterGrid.DataSource = footerdata;
        pdfFooterGrid.Draw(page, new Syncfusion.Drawing.PointF(350, 500));  


        PdfTextElement footerText = new PdfTextElement("Thank You",font3, PdfBrushes.Black);
        PdfLayoutResult result5 = footerText.Draw(page, new PointF(0, 500));
        PdfTextElement footerText2 = new PdfTextElement("HST/GST No: 812334530",font3, PdfBrushes.Black);
        PdfLayoutResult result6 = footerText2.Draw(page, new PointF(0, 520));

        MemoryStream memoryStream = new MemoryStream();

        // Save the PDF document.
        pdfDocument.Save(memoryStream);

        // Download the PDF document
        JS.SaveAs("Sample.pdf", memoryStream.ToArray());

    }
}
