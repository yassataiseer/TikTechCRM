@page "/inventory"
@inject IModalService Modal

<html>
@if (InventoryData == null){
 <div id="app" style="margin: 0 auto; width: 100vw; height: 100vh">
        <div class="text-center pt-3" style="color: rgb(5, 39, 103); font-size: 16pt">
          Loading...
        </div>
        <div class="text-center mt-3">
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"
                style="font-size: 16pt; width: 36px; height: 36px; color: rgb(5, 39, 103)" />
        </div>
        <div class="text-center">
</div>
</div>
}else{
<h1>Inventory</h1>
    <br>
    <button  class="btn btn-info" @onclick="() => Redirect()"><Tooltip Text="Add To Inventory"><i class="oi oi-plus"></i> </Tooltip> Inventory</button> 
    <br>
    <table class="table">
        <thead>
            <tr>
                <th>Item</th>
                <th>Barcode</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Status</th>

            </tr>
        </thead>
        <tbody>
                @foreach (var Current_Inventory in InventoryData)
                {
                string Color = "#ff9e9e";

                    <tr>

                         @if(Current_Inventory.Quantity>0){
                             Color = "#adffc3";
                         }


                        <td bgcolor=@Color>@Current_Inventory.Item</td>
                        <td bgcolor=@Color>@Current_Inventory.Barcode</td>
                        <td bgcolor=@Color>@Current_Inventory.Price</td>
                        <td bgcolor=@Color>@Current_Inventory.Quantity</td>
                        <td bgcolor=@Color>@Current_Inventory.Status</td>

                        <br>
                         

                        <button class="btn btn-primary" @onclick="() => EditRedirect(Current_Inventory.Item,Current_Inventory.Barcode,Current_Inventory.Price,Current_Inventory.Quantity,Current_Inventory.Status)"><Tooltip Text="Edit Row"> <i class="oi oi-pencil"></i></Tooltip></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteInventory(Current_Inventory.Item)"> <Tooltip Text="Delete"><i class="oi oi-trash"></i></Tooltip></button>
                    </tr>
                }
        </tbody>
    </table>


}
</html>

    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;
    
@code{
    private dynamic validate;
    private List<InventoryModel> InventoryData = new();


    protected override async Task OnInitializedAsync(){
        validate =  await JsRuntime.InvokeAsync<string>("BlazorGetLocalStorage","Username:");
       string value = (string)validate;
       if(value==null){
            NavManager.NavigateTo("/",true); 
       }
        using var client = new HttpClient();
        var result = await client.GetStringAsync("https://ticktechapi.pythonanywhere.com/Inventory/grab_Inventory");

        JArray data = JArray.Parse(result);
        foreach (dynamic obj in data){
                InventoryData.Add(new InventoryModel(){
                    Barcode = obj.Barcode,
                    Item  = obj.Item,
                    Price = obj.Price,
                    Quantity = obj.Quantity,
                    Status = obj.Status
            });
        }
        StateHasChanged();
    }
    private async void DeleteInventory(string Item){
        using var client = new HttpClient();
        var result = await client.GetStringAsync("https://ticktechapi.pythonanywhere.com/Inventory/del_Inventory/"+Item);
        NavManager.NavigateTo("/inventory",true); 
    }
    void Redirect(){
        NavManager.NavigateTo("/newinventory",true); 
    }
    private void EditRedirect(string Item,string Barcode, double Price, int Quantity, string Status)
    {
        NavManager.NavigateTo("/editinventory/"+Item+"/"+Barcode+"/"+Price.ToString("0.00")+"/"+Quantity.ToString()+"/"+Status,true); 
    }
}
