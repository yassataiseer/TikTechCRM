@page "/inventory"
@inject IModalService Modal

<html>
@if (InventoryData == null){
        <p><em>Loading...</em></p>
}else{
<h1>Inventory</h1>
    <br>
    <button  class="btn btn-info" @onclick="() => Redirect()">Add Inventory</button> 
    <br>
    <table class="table">
        <thead>
            <tr>
                <th>Item</th>
                <th>Barcode</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Status</th>

            </tr>
        </thead>
        <tbody>
                @foreach (var Current_Inventory in InventoryData)
                {
                    <tr>
                         @if(Current_Inventory.Status.ToLower()=="full"){
                        <td bgcolor="#adffc3">@Current_Inventory.Item</td>
                        <td bgcolor="#adffc3">@Current_Inventory.Barcode</td>
                        <td bgcolor="#adffc3">@Current_Inventory.Price</td>
                        <td bgcolor="#adffc3">@Current_Inventory.Quantity</td>
                        <td bgcolor="#adffc3">@Current_Inventory.Status</td>
                        <button class="btn btn-primary" > Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteInventory(Current_Inventory.Item)">Delete</button>
                        <br>
                         }
                         else if(Current_Inventory.Status.ToLower()=="almost empty"){
                        <td bgcolor="yellow">@Current_Inventory.Item</td>
                        <td bgcolor="yellow">@Current_Inventory.Barcode</td>
                        <td bgcolor="yellow">@Current_Inventory.Price</td>
                        <td bgcolor="yellow">@Current_Inventory.Quantity</td>       
                        <td bgcolor="yellow">@Current_Inventory.Status</td>                             
                        <button class="btn btn-primary" > Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteInventory(Current_Inventory.Item)">Delete</button>
                        <br>                      
                         }
                         else{
                        <td bgcolor="#ff9e9e">@Current_Inventory.Item</td>
                        <td bgcolor="#ff9e9e">@Current_Inventory.Barcode</td>
                        <td bgcolor="#ff9e9e">@Current_Inventory.Price</td>
                        <td bgcolor="#ff9e9e">@Current_Inventory.Quantity</td>
                        <td bgcolor="#ff9e9e">@Current_Inventory.Status</td>
                        <button class="btn btn-primary" > Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteInventory(Current_Inventory.Item)">Delete</button>
                        <br>
                         }

                        
                    </tr>
                }
        </tbody>
    </table>


}
</html>

    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;
    
@code{
    private dynamic validate;
    private List<InventoryModel> InventoryData = new();


    protected override async Task OnInitializedAsync(){
        validate =  await JsRuntime.InvokeAsync<string>("BlazorGetLocalStorage","Username:");
       string value = (string)validate;
       if(value==null){
            NavManager.NavigateTo("/",true); 
       }
        using var client = new HttpClient();
        var result = await client.GetStringAsync("http://0.0.0.0:800/Inventory/grab_Inventory");

        JArray data = JArray.Parse(result);
        foreach (dynamic obj in data){
                InventoryData.Add(new InventoryModel(){
                    Barcode = obj.Barcode,
                    Item  = obj.Item,
                    Price = obj.Price,
                    Quantity = obj.Quantity,
                    Status = obj.Status
            });
        }
        StateHasChanged();
    }
    private async void DeleteInventory(string Item){
        using var client = new HttpClient();
        var result = await client.GetStringAsync("http://0.0.0.0:800/Inventory/del_Inventory/"+Item);
        NavManager.NavigateTo("/inventory",true); 
    }
    void Redirect(){
        NavManager.NavigateTo("/newinventory",true); 
    }
}
