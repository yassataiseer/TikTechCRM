@page "/Clients"
<html>

<h1>Clients</h1>
    @if(ClientData==null){
        <p><em>Loading...</em></p>
    }
    <br>
    <button  class="btn btn-info"  @onclick="() => Redirect()"><Tooltip Text="New Client"><i class="oi oi-plus"></i></Tooltip> Client</button> 
    <br>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Postal Code</th>
                <th>Email</th>
                <th>Phone Number</th>
            </tr>
        </thead>
       <tbody>
                @foreach (var Current_Client in ClientData)
                {
                    @if(!@Current_Client.Deleted){

                    <tr>
                        <td>@Current_Client.Username</td>
                        <td>@Current_Client.Address</td>
                        <td>@Current_Client.Postal_code</td>
                        <td>@Current_Client.Email</td>
                        <td>@Current_Client.Phone_Number</td>
                        <button class="btn btn-primary" @onclick="() => EditRedirect(Current_Client.Username,Current_Client.Address,Current_Client.Postal_code,Current_Client.Email,Current_Client.Phone_Number,Current_Client.Id)"> <Tooltip Text="Edit Row"><i class="oi oi-pencil"></i></Tooltip></button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteClient(Current_Client.Id)"><Tooltip Text="Delete"><i class="oi oi-trash"></i></Tooltip></button>

                        
                    </tr>
                    } 
                }
        </tbody>
  
    </table>



</html>
    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;
@code{
    private dynamic validate;
    private List<ClientModel> ClientData = new();

    protected override async Task OnInitializedAsync(){
        validate =  await JsRuntime.InvokeAsync<string>("BlazorGetLocalStorage","Username:");
       string value = (string)validate;
       if(value==null){
            NavManager.NavigateTo("/",true); 
       }
        using var client = new HttpClient();
        var result = await client.GetStringAsync("http://0.0.0.0:800/Clients/all_Clients");

        JArray data = JArray.Parse(result);
        foreach (dynamic obj in data){
                ClientData.Add(new ClientModel(){
                    Address = obj.Address,
                    Deleted  = obj.Deleted,
                    Email = obj.Email,
                    Id = obj.Id,
                    Phone_Number = obj.Phone_Number,
                    Postal_code = obj.Postal_code,
                    Username = obj.Username
            });
            Console.WriteLine(obj.Deleted);
        }
       
        StateHasChanged();
    }
        private void Redirect()
    {
        NavManager.NavigateTo("/newclient",true); 
    }
    private async void DeleteClient(int id){
        using var client = new HttpClient();
        var result = await client.GetStringAsync("http://0.0.0.0:800/Clients/del_Client/"+id.ToString());
        NavManager.NavigateTo("/Clients",true); 

    }
    private void EditRedirect(string Username, string Address, string Postal_code, string Email, string Phone_number, int id){
        NavManager.NavigateTo("/EditClient/"+Username+"/"+Address+"/"+Postal_code+"/"+Email+"/"+Phone_number+"/"+id.ToString());
    }


}