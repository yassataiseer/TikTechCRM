@page "/Newservice"

<!DOCTYPE html>
<html>

<head>
    <h1>New Service:</h1>
    <h6><b>DO NOT USE THE FOLLOWING CHARACTERS: / \ </b></h6>
</head>
<div class="card">
<div class="container">
<EditForm Model="@ServiceFormModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <h4>Service Name:</h4>
    <InputText type="text" id="Service_name" @bind-Value="ServiceFormModel.Service_name" />
    <br>
    <h4>Service Purpose:</h4>
    <InputText type="text" id="Service_purpose" @bind-Value="ServiceFormModel.Service_purpose" />
    <h4>Price:</h4>
    <InputNumber type=float min="1" id="Service_cost" @bind-Value="ServiceFormModel.Service_cost" />
    <br>
    <br>
    <button type="submit" class="btn btn-primary">Submit</button> 
    <ValidationSummary />
</EditForm>
</div>
</div>
</html>


@code{
    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;
    private dynamic validate;
    private ServiceFormModel ServiceFormModel = new();

    private async void  HandleValidSubmit()
    {
        using var client = new HttpClient();
        Console.WriteLine(ServiceFormModel.Service_cost.ToString("0.00"));
        var result = await client.GetStringAsync("https://ticktechapi.pythonanywhere.com/Services/mk_Service/"+ServiceFormModel.Service_name+"/"+ServiceFormModel.Service_purpose+"/"+ServiceFormModel.Service_cost.ToString("0.00"));
        dynamic data = JObject.Parse(result);
        Console.WriteLine(data.Status);
        if (data.Status=="true"){
            NavManager.NavigateTo("/services",true); 
        } 
        else {
            await JsRuntime.InvokeVoidAsync("alert", "Service is already taken");
        }
        //Console.WriteLine(LoginModel.Password);
        //Console.WriteLine("hello");
        // Process the valid form
    }

    protected override async Task OnInitializedAsync(){
        validate =  await JsRuntime.InvokeAsync<string>("BlazorGetLocalStorage","Username:");
       string value = (string)validate;
       
       if(value==null){
            NavManager.NavigateTo("/",true); 
       }        
    }
}

